let n = module.exports = {}
let t = module

var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
    return typeof e
} : function(e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
};
(function(e, o) {
    "function" == typeof define && define.amd ? define([], function() {
        return o(e)
    }) : "object" == (void 0 === n ? "undefined" : i(n)) ? t.exports = o(e) : e.Polyglot = o(e)
})(void 0, function(e) {
    function t(e) {
        e = e || {}, this.phrases = {}, this.extend(e.phrases || {}), this.currentLocale = e.locale || "en", this.allowMissing = !!e.allowMissing, this.warn = e.warn || l
    }

    function n(e) {
        var t, n, i, o = {};
        for (t in e)
            if (e.hasOwnProperty(t))
                for (i in n = e[t]) o[n[i]] = t;
        return o
    }

    function o(e) {
        return e.replace(/^\s+|\s+$/g, "")
    }

    function a(e, t, n) {
        var i, a;
        return null != n && e ? i = o((a = e.split(h))[c(t, n)] || a[0]) : i = e, i
    }

    function s(e) {
        var t = n(p);
        return t[e] || t.en
    }

    function c(e, t) {
        return u[s(e)](t)
    }

    function r(e, t) {
        for (var n in t) "_" !== n && t.hasOwnProperty(n) && (e = e.replace(new RegExp("%\\{" + n + "\\}", "g"), t[n]));
        return e
    }

    function l(t) {
        e.console && e.console.warn && e.console.warn("WARNING: " + t)
    }

    function d(e) {
        var t = {};
        for (var n in e) t[n] = e[n];
        return t
    }
    t.VERSION = "0.4.3", t.prototype.locale = function(e) {
        return e && (this.currentLocale = e), this.currentLocale
    }, t.prototype.extend = function(e, t) {
        var n;
        for (var o in e) e.hasOwnProperty(o) && (n = e[o], t && (o = t + "." + o), "object" == (void 0 === n ? "undefined" : i(n)) ? this.extend(n, o) : this.phrases[o] = n)
    }, t.prototype.clear = function() {
        this.phrases = {}
    }, t.prototype.replace = function(e) {
        this.clear(), this.extend(e)
    }, t.prototype.t = function(e, t) {
        var n, i;
        return "number" == typeof(t = null == t ? {} : t) && (t = {
            smart_count: t
        }), "string" == typeof this.phrases[e] ? n = this.phrases[e] : "string" == typeof t._ ? n = t._ : this.allowMissing ? n = e : (this.warn('Missing translation for key: "' + e + '"'), i = e), "string" == typeof n && (t = d(t), i = r(i = a(n, this.currentLocale, t.smart_count), t)), i
    }, t.prototype.has = function(e) {
        return e in this.phrases
    };
    var h = "||||",
        u = {
            chinese: function(e) {
                return 0
            },
            german: function(e) {
                return 1 !== e ? 1 : 0
            },
            french: function(e) {
                return e > 1 ? 1 : 0
            },
            russian: function(e) {
                return e % 10 == 1 && e % 100 != 11 ? 0 : e % 10 >= 2 && e % 10 <= 4 && (e % 100 < 10 || e % 100 >= 20) ? 1 : 2
            },
            czech: function(e) {
                return 1 === e ? 0 : e >= 2 && e <= 4 ? 1 : 2
            },
            polish: function(e) {
                return 1 === e ? 0 : e % 10 >= 2 && e % 10 <= 4 && (e % 100 < 10 || e % 100 >= 20) ? 1 : 2
            },
            icelandic: function(e) {
                return e % 10 != 1 || e % 100 == 11 ? 1 : 0
            }
        },
        p = {
            chinese: ["fa", "id", "ja", "ko", "lo", "ms", "th", "tr", "zh"],
            german: ["da", "de", "en", "es", "fi", "el", "he", "hu", "it", "nl", "no", "pt", "sv"],
            french: ["fr", "tl", "pt-br"],
            russian: ["hr", "ru"],
            czech: ["cs"],
            polish: ["pl"],
            icelandic: ["is"]
        };
    return t
})